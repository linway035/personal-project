<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/css/bootstrap.min.css" />
</head>

<main class="content">
  <div class="container p-0">
    <h1 class="h3 mb-3">Messages</h1>

    <div class="card">
      <div class="row g-0">
        <div class="col-12 col-lg-5 col-xl-3 border-right">
          <div class="px-4 d-none d-md-block">
            <div class="d-flex align-items-center">
              <div class="flex-grow-1">
                <input type="text" class="form-control my-3" placeholder="Search..." />
              </div>
            </div>
          </div>

          <div id="chat-list" class="list-group">
            <!-- 這裡將動態生成的列表項目插入 -->
          </div>

          <hr class="d-block d-lg-none mt-1 mb-0" />
        </div>
        <div class="col-12 col-lg-7 col-xl-9">
          <div class="py-2 px-4 border-bottom d-none d-lg-block">
            <div class="d-flex align-items-center py-1">
              <div class="position-relative" id="chatHeaderImg">
                <img src="https://fakeimg.pl/50x50/ffffff/ffffff" class="rounded-circle mr-1" width="40" height="40" />
              </div>
              <div class="flex-grow-1 pl-3" id="chatHeader"></div>
            </div>
          </div>

          <div class="position-relative">
            <div class="chat-messages p-4"></div>
          </div>

          <div class="flex-grow-0 py-3 px-4 border-top">
            <form id="messageForm">
              <div class="input-group">
                <input type="text" class="form-control" placeholder="Type your message" id="sendMes" />
                <button type="submit" class="btn btn-primary">Send</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<style>
  body {
    margin-top: 20px;
  }

  .chat-online {
    color: #34ce57;
  }

  .chat-offline {
    color: #e4606d;
  }

  .chat-messages {
    display: flex;
    flex-direction: column;
    overflow-y: scroll;
    height: 70vh;
  }

  .chat-message-left,
  .chat-message-right {
    display: flex;
    flex-shrink: 0;
  }

  .chat-message-left {
    margin-right: auto;
  }

  .chat-message-right {
    flex-direction: row-reverse;
    margin-left: auto;
  }

  .py-3 {
    padding-top: 1rem !important;
    padding-bottom: 1rem !important;
  }

  .px-4 {
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
  }

  .flex-grow-0 {
    flex-grow: 0 !important;
  }

  .border-top {
    border-top: 1px solid #dee2e6 !important;
  }
</style>

<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
<script>
  let socket = io()
  const chatRooms = []
  const senderId = localStorage.getItem('userId')
  const userName = localStorage.getItem('name')
  const userAvatar = localStorage.getItem('avatar')
  const chatHeader = document.getElementById('chatHeader')
  const chatHeaderImg = document.getElementById('chatHeaderImg')
  const chatMessagesContainer = document.querySelector('.chat-messages')
  const sendMessageButton = document.querySelector('.btn-primary')
  const messageInput = document.getElementById('sendMes')
  const messageForm = document.getElementById('messageForm')
  const listContainer = document.getElementById('chat-list')
  let activeChatRoomID = null
  let receiverID = null

  socket.emit('join', { senderId: senderId.toString(), userName })

  // 使用fetch函式從API獲取聊天室列表
  fetch('/chats/rooms')
    .then(response => response.json())
    .then(data => {
      data.forEach(room => {
        const listItem = document.createElement('div')
        listItem.style = 'cursor: pointer'

        listItem.className = 'list-group-item list-group-item-action border-0'
        listItem.addEventListener('click', () => {
          getChatMessages(room.room_id)
        })

        chatRooms[room.room_id] = {
          receiver_id: room.receiver_id,
          receiver_name: room.receiver_name,
          receiver_avatar: room.receiver_avatar,
        }

        const dFlexDiv = document.createElement('div')
        dFlexDiv.className = 'd-flex align-items-start'

        const image = document.createElement('img')
        image.src = room.receiver_avatar
        image.className = 'rounded-circle mr-1'
        image.alt = room.receiver_name
        image.width = 40
        image.height = 40

        const contentDiv = document.createElement('div')
        contentDiv.className = 'flex-grow-1 ml-3'

        const receiverName = document.createElement('strong')
        receiverName.textContent = room.receiver_name

        const smallDiv = document.createElement('div')
        smallDiv.className = 'small'

        const onlineText = document.createElement('em')
        onlineText.textContent = room.message

        // 將生成的元素組合起來
        smallDiv.appendChild(onlineText)

        contentDiv.appendChild(receiverName)
        contentDiv.appendChild(smallDiv)

        dFlexDiv.appendChild(image)
        dFlexDiv.appendChild(contentDiv)
        listItem.appendChild(dFlexDiv)

        // 將生成的列表項目加入到列表容器中
        listContainer.appendChild(listItem)
      })
    })
    .catch(error => {
      console.error('Error:', error)
    })

  // 取得聊天訊息的函式
  function getChatMessages(roomId) {
    const chatRoom = chatRooms[roomId]
    const { receiver_name, receiver_avatar } = chatRoom
    chatHeader.innerHTML = '<strong>' + receiver_name + '</strong>'
    chatHeaderImg.innerHTML = `
    <img
      src="${receiver_avatar}"
      class="rounded-circle mr-1"
      width="40"
      height="40"
    />
    `
    activeChatRoomID = roomId
    receiverID = chatRooms[roomId].receiver_id.toString()
    console.log('activeChatRoomID', activeChatRoomID)
    console.log('receiverID', receiverID)

    // 使用fetch函式從API獲取聊天訊息
    fetch(`./chats/messages/${roomId}`)
      .then(response => response.json())
      .then(data => {
        chatMessagesContainer.innerHTML = ''

        data.forEach(message => {
          const chatMessageDiv = document.createElement('div')
          chatMessageDiv.className =
            message.user_id === Number(senderId)
              ? 'chat-message-right pb-4'
              : 'chat-message-left pb-4'

          const avatarDiv = document.createElement('div')

          const avatarImage = document.createElement('img')
          avatarImage.src =
            message.user_id === Number(senderId) ? userAvatar : receiver_avatar
          avatarImage.className = 'rounded-circle mr-1'
          avatarImage.width = 40
          avatarImage.height = 40

          const timestampDiv = document.createElement('div')
          timestampDiv.className = 'text-muted small text-nowrap mt-2'
          timestampDiv.textContent = new Date(
            message.created_at
          ).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })

          avatarDiv.appendChild(avatarImage)
          avatarDiv.appendChild(timestampDiv)

          const messageDiv = document.createElement('div')
          messageDiv.className =
            message.user_id === Number(senderId)
              ? 'flex-shrink-1 bg-light rounded py-2 px-3 mr-3'
              : 'flex-shrink-1 bg-light rounded py-2 px-3 ml-3'

          const senderDiv = document.createElement('div')
          senderDiv.className = 'font-weight-bold mb-1'
          senderDiv.textContent =
            message.user_id === Number(senderId) ? 'You' : receiver_name

          const messageContentDiv = document.createTextNode(message.message)

          messageDiv.appendChild(senderDiv)
          messageDiv.appendChild(messageContentDiv)

          chatMessageDiv.appendChild(avatarDiv)
          chatMessageDiv.appendChild(messageDiv)

          chatMessagesContainer.appendChild(chatMessageDiv)
          chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight
        })
      })
      .catch(error => {
        console.error('Error:', error)
      })
  }

  socket.on('message', ({ sender, roomID, message, receiverID }) => {
    console.log('mess', sender, roomID, message)
    fetch('/chats/rooms')
      .then(response => response.json())
      .then(data => {
        listContainer.innerHTML = ''
        data.forEach(room => {
          const listItem = document.createElement('div')
          listItem.style = 'cursor: pointer'

          listItem.className = 'list-group-item list-group-item-action border-0'
          listItem.addEventListener('click', () => {
            getChatMessages(room.room_id)
          })

          chatRooms[room.room_id] = {
            receiver_id: room.receiver_id,
            receiver_name: room.receiver_name,
            receiver_avatar: room.receiver_avatar,
          }

          const dFlexDiv = document.createElement('div')
          dFlexDiv.className = 'd-flex align-items-start'

          const image = document.createElement('img')
          image.src = room.receiver_avatar
          image.className = 'rounded-circle mr-1'
          image.alt = room.receiver_name
          image.width = 40
          image.height = 40

          const contentDiv = document.createElement('div')
          contentDiv.className = 'flex-grow-1 ml-3'

          const receiverName = document.createElement('strong')
          receiverName.textContent = room.receiver_name

          const smallDiv = document.createElement('div')
          smallDiv.className = 'small'

          const onlineText = document.createElement('em')
          onlineText.textContent = room.message

          // 將生成的元素組合起來
          smallDiv.appendChild(onlineText)

          contentDiv.appendChild(receiverName)
          contentDiv.appendChild(smallDiv)

          dFlexDiv.appendChild(image)
          dFlexDiv.appendChild(contentDiv)
          listItem.appendChild(dFlexDiv)

          // 將生成的列表項目加入到列表容器中
          listContainer.appendChild(listItem)
        })
      })
      .catch(error => {
        console.error('Error:', error)
      })

    if (activeChatRoomID === Number(roomID)) {
      console.log('equal')
      const chatMessageDiv = document.createElement('div')
      chatMessageDiv.className =
        sender === senderId
          ? 'chat-message-right pb-4'
          : 'chat-message-left pb-4'
      const avatarDiv = document.createElement('div')

      const avatarImage = document.createElement('img')
      avatarImage.src =
        sender === senderId ? userAvatar : chatRooms[room].receiver_avatar
      avatarImage.className = 'rounded-circle mr-1'
      avatarImage.width = 40
      avatarImage.height = 40

      const timestampDiv = document.createElement('div')
      timestampDiv.className = 'text-muted small text-nowrap mt-2'
      timestampDiv.textContent = new Date().toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit',
      })

      avatarDiv.appendChild(avatarImage)
      avatarDiv.appendChild(timestampDiv)

      const messageDiv = document.createElement('div')
      messageDiv.className =
        sender === senderId
          ? 'flex-shrink-1 bg-light rounded py-2 px-3 mr-3'
          : 'flex-shrink-1 bg-light rounded py-2 px-3 ml-3'

      const senderDiv = document.createElement('div')
      senderDiv.className = 'font-weight-bold mb-1'
      senderDiv.textContent =
        sender === senderId ? 'You' : chatRooms[room].receiver_name

      const messageContentDiv = document.createTextNode(message)

      messageDiv.appendChild(senderDiv)
      messageDiv.appendChild(messageContentDiv)

      chatMessageDiv.appendChild(avatarDiv)
      chatMessageDiv.appendChild(messageDiv)

      chatMessagesContainer.appendChild(chatMessageDiv)
    }
  })
  sendMessageButton.addEventListener('click', function (e) {
    e.preventDefault()
    const message = messageInput.value.trim()
    if (message !== '') {
      sendMessage(message, receiverID)
    }
  })

  messageForm.addEventListener('submit', function (e) {
    e.preventDefault()
    const message = messageInput.value.trim()
    if (message !== '') {
      sendMessage(message, receiverID)
    }
  })

  function sendMessage(message, receiverID) {
    console.log('send', senderId, activeChatRoomID, receiverID)
    socket.emit('message', {
      sender: senderId,
      roomID: activeChatRoomID,
      message: message,
      receiverID: receiverID,
    })
    messageInput.value = ''
  }
</script>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.bundle.min.js"></script>